library(ggplot2)
library(here)
library(tidyverse)
library(readr)
library(kableExtra)
library(lubridate)
library(graphics)
here <- here::here
happiness_2015 <- read_csv(here("data", "2015.csv"))
happiness_2016 <- read_csv(here("data", "2016.csv"))
happiness_2017 <- read_csv(here("data", "2017.csv"))
happiness_2018 <- read_csv(here("data", "2018.csv"))
happiness_2019 <- read_csv(here("data", "2019.csv"))
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, messages=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(here)
library(tidyverse)
library(readr)
library(kableExtra)
library(lubridate)
library(graphics)
here <- here::here
happiness_2015 <- read_csv(here("data", "2015.csv"))
happiness_2016 <- read_csv(here("data", "2016.csv"))
happiness_2017 <- read_csv(here("data", "2017.csv"))
happiness_2018 <- read_csv(here("data", "2018.csv"))
happiness_2019 <- read_csv(here("data", "2019.csv"))
top10_2015  <- happiness_2015 %>%
filter(`Happiness Rank` <= 10) %>%
select(Country, `Happiness Score`) %>%
rename("2015-01-01" = "Happiness Score")
top10_2015 %>%
arrange(desc(`2015-01-01`)) %>%
rename("2015" = "2015-01-01") %>%
kable(caption = "Top10 countries in 2015") %>%
kable_styling(bootstrap_options = c("bordered", "striped"))
data_2016 <- happiness_2016 %>%
select(Country, `Happiness Score`) %>%
rename("2016-01-01" = "Happiness Score")
data_2017 <- happiness_2017 %>%
select(Country, Happiness.Score) %>%
rename("2017-01-01" = "Happiness.Score")
data_2018 <- happiness_2018 %>%
select(`Country or region`, Score) %>%
rename("2018-01-01" = "Score",
"Country" = "Country or region")
data_2019 <- happiness_2019 %>%
select(`Country or region`, Score) %>%
rename("2019-01-01" = "Score",
"Country" = "Country or region")
total_data <- list(top10_2015, data_2016, data_2017, data_2018, data_2019) %>%
reduce(left_join, by = "Country")
total_data_plot <- total_data %>%
pivot_longer(c(`2015-01-01`,`2016-01-01`,`2017-01-01`,`2018-01-01`,`2019-01-01`), names_to = "year", values_to = "score") %>%
mutate(year = year(year))
total_data_plot %>%
ggplot(aes(year, score, colour = Country)) +
geom_line() +
geom_point(aes(shape = Country))
total_countries_2015 <- happiness_2015 %>%
select(Country) %>% count()
comparison_2015 <- happiness_2015 %>%
mutate(total_countries = total_countries_2015$n, average_score = mean(`Happiness Score`)) %>%
filter(`Happiness Score` > average_score) %>%
mutate(above_average = length(Country), below_average = total_countries - above_average)
comparison_2015 %>%
select(above_average, below_average) %>%
unique() %>%
pivot_longer(c("above_average", "below_average"), names_to = "average", values_to = "count") %>%
mutate(percentage = round(count/sum(count) * 100, digits = 2)) %>%
mutate(percentage_label = paste(percentage, "%")) %>%
ggplot(aes("", percentage, fill = average)) +
geom_col(stat= "identity", width = 1) +
coord_polar("y", start = 0, direction = -1) +
theme_void() +
geom_text(position = position_stack(vjust = 0.5), aes(label = percentage_label)) +
ggtitle("The percentage of above or below average score in 2015")
comparison_2015 %>%
group_by(Region) %>%
count() %>%
ggplot(aes(reorder(Region, n), n)) +
geom_col(aes(fill = Region)) +
coord_flip() +
xlab("region") +
ylab("count") +
scale_y_continuous(breaks = seq(0, 20, by = 1))
total_countries_2019 <- happiness_2019 %>%
select(`Country or region`) %>% count()
comparison_2019 <- happiness_2019 %>%
mutate(total_countries = total_countries_2019$n, average_score = mean(Score)) %>%
filter(Score > average_score) %>%
mutate(above_average = length(`Country or region`), below_average = total_countries - above_average)
comparison_2019 %>%
select(above_average, below_average) %>%
unique() %>%
pivot_longer(c("above_average", "below_average"), names_to = "average", values_to = "count") %>%
mutate(per = round(count/sum(count) * 100, digits = 2)) %>%
mutate(per_label = paste(per, "%")) %>%
ggplot(aes("", per, fill = average)) +
geom_col(stat = "identify", width = 1) +
coord_polar("y", start = 0, direction = -1) +
theme_void() +
geom_text(aes(label = per_label), position = position_stack(vjust = 0.5)) +
ggtitle("The percentage of above or below average score in 2019")
region <- happiness_2015 %>% select(Country, Region)
comparison_2019 %>%
left_join(region, by=c("Country or region" = "Country")) %>%
filter(!is.na(Region)) %>%
group_by(Region) %>%
count() %>%
ggplot(aes(reorder(Region, n), n, fill = Region)) +
geom_col() +
coord_flip() +
xlab("region") +
ylab("count") +
scale_y_continuous(breaks = seq(0,20, by = 1))
view(happiness_2019)
view(total_data)
view(happiness_2019)
?par
total_countries_2015 <- happiness_2015 %>%
select(Country) %>% count()
comparison_2015 <- happiness_2015 %>%
mutate(total_countries = total_countries_2015$n, average_score = mean(`Happiness Score`)) %>%
filter(`Happiness Score` > average_score) %>%
mutate(above_average = length(Country), below_average = total_countries - above_average)
pie_2015 <- comparison_2015 %>%
select(above_average, below_average) %>%
unique() %>%
pivot_longer(c("above_average", "below_average"), names_to = "average", values_to = "count") %>%
mutate(percentage = round(count/sum(count) * 100, digits = 2)) %>%
mutate(percentage_label = paste(percentage, "%")) %>%
ggplot(aes("", percentage, fill = average)) +
geom_col(stat= "identity", width = 1) +
coord_polar("y", start = 0, direction = -1) +
theme_void() +
geom_text(position = position_stack(vjust = 0.5), aes(label = percentage_label)) +
ggtitle("The percentage of above or below average score in 2015")
total_countries_2019 <- happiness_2019 %>%
select(`Country or region`) %>% count()
comparison_2019 <- happiness_2019 %>%
mutate(total_countries = total_countries_2019$n, average_score = mean(Score)) %>%
filter(Score > average_score) %>%
mutate(above_average = length(`Country or region`), below_average = total_countries - above_average)
pie_2019 <- comparison_2019 %>%
select(above_average, below_average) %>%
unique() %>%
pivot_longer(c("above_average", "below_average"), names_to = "average", values_to = "count") %>%
mutate(per = round(count/sum(count) * 100, digits = 2)) %>%
mutate(per_label = paste(per, "%")) %>%
ggplot(aes("", per, fill = average)) +
geom_col(stat = "identify", width = 1) +
coord_polar("y", start = 0, direction = -1) +
theme_void() +
geom_text(aes(label = per_label), position = position_stack(vjust = 0.5)) +
ggtitle("The percentage of above or below average score in 2019")
bar(mfrow=c(1,2))
par(mfrow=c(1,2))
pie_2015
pie_2019
grid.arrange(pie_2015,pie_2019, ncol=2)
?grid.arrange
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, messages=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(here)
library(tidyverse)
library(readr)
library(kableExtra)
library(lubridate)
library(cowplot)
here <- here::here
plot_grid(pie_2015,pie_2019, ncol=2)
total_countries_2019 <- happiness_2019 %>%
select(`Country or region`) %>% count()
comparison_2019 <- happiness_2019 %>%
mutate(total_countries = total_countries_2019$n, average_score = mean(Score)) %>%
filter(Score > average_score) %>%
mutate(above_average = length(`Country or region`), below_average = total_countries - above_average)
pie_2019 <- comparison_2019 %>%
select(above_average, below_average) %>%
unique() %>%
pivot_longer(c("above_average", "below_average"), names_to = "average", values_to = "count") %>%
mutate(per = round(count/sum(count) * 100, digits = 2)) %>%
mutate(per_label = paste(per, "%")) %>%
ggplot(aes("", per, fill = average)) +
geom_col(stat = "identify", width = 1) +
coord_polar("y", start = 0, direction = -1) +
theme_void() +
geom_text(aes(label = per_label), position = position_stack(vjust = 0.5)) +
ggtitle("The comparison of average score in 2019")
total_countries_2015 <- happiness_2015 %>%
select(Country) %>% count()
comparison_2015 <- happiness_2015 %>%
mutate(total_countries = total_countries_2015$n, average_score = mean(`Happiness Score`)) %>%
filter(`Happiness Score` > average_score) %>%
mutate(above_average = length(Country), below_average = total_countries - above_average)
pie_2015 <- comparison_2015 %>%
select(above_average, below_average) %>%
unique() %>%
pivot_longer(c("above_average", "below_average"), names_to = "average", values_to = "count") %>%
mutate(percentage = round(count/sum(count) * 100, digits = 2)) %>%
mutate(percentage_label = paste(percentage, "%")) %>%
ggplot(aes("", percentage, fill = average)) +
geom_col(stat= "identity", width = 1) +
coord_polar("y", start = 0, direction = -1) +
theme_void() +
geom_text(position = position_stack(vjust = 0.5), aes(label = percentage_label)) +
ggtitle("The comparison of average score in 2015")
plot_grid(pie_2015,pie_2019, ncol=2)
plot_grid(pie_2015,pie_2019, ncol=2)
plot_grid(pie_2015,pie_2019, nrow=2)
plot_grid(pie_2015,pie_2019, ncol=2)
view(comparison_2015)
view(comparison_2019)
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, messages=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(here)
library(tidyverse)
library(readr)
library(kableExtra)
library(lubridate)
library(cowplot)
here <- here::here
happiness_2015 <- read_csv(here("data", "2015.csv"))
happiness_2016 <- read_csv(here("data", "2016.csv"))
happiness_2017 <- read_csv(here("data", "2017.csv"))
happiness_2018 <- read_csv(here("data", "2018.csv"))
happiness_2019 <- read_csv(here("data", "2019.csv"))
top10_2015  <- happiness_2015 %>%
filter(`Happiness Rank` <= 10) %>%
select(Country, `Happiness Score`) %>%
rename("2015-01-01" = "Happiness Score")
top10_2015 %>%
arrange(desc(`2015-01-01`)) %>%
rename("2015" = "2015-01-01") %>%
kable(caption = "Top10 countries in 2015") %>%
kable_styling(bootstrap_options = c("bordered", "striped"))
data_2016 <- happiness_2016 %>%
select(Country, `Happiness Score`) %>%
rename("2016-01-01" = "Happiness Score")
data_2017 <- happiness_2017 %>%
select(Country, Happiness.Score) %>%
rename("2017-01-01" = "Happiness.Score")
data_2018 <- happiness_2018 %>%
select(`Country or region`, Score) %>%
rename("2018-01-01" = "Score",
"Country" = "Country or region")
data_2019 <- happiness_2019 %>%
select(`Country or region`, Score) %>%
rename("2019-01-01" = "Score",
"Country" = "Country or region")
total_data <- list(top10_2015, data_2016, data_2017, data_2018, data_2019) %>%
reduce(left_join, by = "Country")
total_data_plot <- total_data %>%
pivot_longer(c(`2015-01-01`,`2016-01-01`,`2017-01-01`,`2018-01-01`,`2019-01-01`), names_to = "year", values_to = "score") %>%
mutate(year = year(year))
total_data_plot %>%
ggplot(aes(year, score, colour = Country)) +
geom_line() +
geom_point(aes(shape = Country))
total_countries_2015 <- happiness_2015 %>%
select(Country) %>% count()
comparison_2015 <- happiness_2015 %>%
mutate(total_countries = total_countries_2015$n, average_score = mean(`Happiness Score`)) %>%
filter(`Happiness Score` > average_score) %>%
mutate(above_average = length(Country), below_average = total_countries - above_average)
pie_2015 <- comparison_2015 %>%
select(above_average, below_average) %>%
unique() %>%
pivot_longer(c("above_average", "below_average"), names_to = "average", values_to = "count") %>%
mutate(percentage = round(count/sum(count) * 100, digits = 2)) %>%
mutate(percentage_label = paste(percentage, "%")) %>%
ggplot(aes("", percentage, fill = average)) +
geom_col(stat= "identity", width = 1) +
coord_polar("y", start = 0, direction = -1) +
theme_void() +
geom_text(position = position_stack(vjust = 0.5), aes(label = percentage_label)) +
ggtitle("The comparison of average score in 2015")
comparison_2015 %>%
group_by(Region) %>%
count() %>%
ggplot(aes(reorder(Region, n), n)) +
geom_col(aes(fill = Region)) +
coord_flip() +
xlab("region") +
ylab("count") +
scale_y_continuous(breaks = seq(0, 20, by = 1))
total_countries_2019 <- happiness_2019 %>%
select(`Country or region`) %>% count()
comparison_2019 <- happiness_2019 %>%
mutate(total_countries = total_countries_2019$n, average_score = mean(Score)) %>%
filter(Score > average_score) %>%
mutate(above_average = length(`Country or region`), below_average = total_countries - above_average)
pie_2019 <- comparison_2019 %>%
select(above_average, below_average) %>%
unique() %>%
pivot_longer(c("above_average", "below_average"), names_to = "average", values_to = "count") %>%
mutate(per = round(count/sum(count) * 100, digits = 2)) %>%
mutate(per_label = paste(per, "%")) %>%
ggplot(aes("", per, fill = average)) +
geom_col(stat = "identify", width = 1) +
coord_polar("y", start = 0, direction = -1) +
theme_void() +
geom_text(aes(label = per_label), position = position_stack(vjust = 0.5)) +
ggtitle("The comparison of average score in 2019")
region <- happiness_2015 %>% select(Country, Region)
comparison_2019 %>%
left_join(region, by=c("Country or region" = "Country")) %>%
filter(!is.na(Region)) %>%
group_by(Region) %>%
count() %>%
ggplot(aes(reorder(Region, n), n, fill = Region)) +
geom_col() +
coord_flip() +
xlab("region") +
ylab("count") +
scale_y_continuous(breaks = seq(0,20, by = 1))
plot_grid(pie_2015,pie_2019, ncol=2)
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, message=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(here)
library(tidyverse)
library(readr)
library(kableExtra)
library(lubridate)
library(cowplot)
here <- here::here
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, message=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(here)
library(tidyverse)
library(readr)
library(kableExtra)
library(lubridate)
library(cowplot)
here <- here::here
happiness_2015 <- read_csv(here("data", "2015.csv"))
happiness_2016 <- read_csv(here("data", "2016.csv"))
happiness_2017 <- read_csv(here("data", "2017.csv"))
happiness_2018 <- read_csv(here("data", "2018.csv"))
happiness_2019 <- read_csv(here("data", "2019.csv"))
data_2016 <- happiness_2016 %>%
select(Country, `Happiness Score`) %>%
rename("2016-01-01" = "Happiness Score")
data_2017 <- happiness_2017 %>%
select(Country, Happiness.Score) %>%
rename("2017-01-01" = "Happiness.Score")
data_2018 <- happiness_2018 %>%
select(`Country or region`, Score) %>%
rename("2018-01-01" = "Score",
"Country" = "Country or region")
data_2019 <- happiness_2019 %>%
select(`Country or region`, Score) %>%
rename("2019-01-01" = "Score",
"Country" = "Country or region")
total_data <- list(top10_2015, data_2016, data_2017, data_2018, data_2019) %>%
reduce(left_join, by = "Country")
total_countries_2015 <- happiness_2015 %>%
select(Country) %>% count()
comparison_2015 <- happiness_2015 %>%
mutate(total_countries = total_countries_2015$n, average_score = mean(`Happiness Score`)) %>%
filter(`Happiness Score` > average_score) %>%
mutate(above_average = length(Country), below_average = total_countries - above_average)
pie_2015 <- comparison_2015 %>%
select(above_average, below_average) %>%
unique() %>%
pivot_longer(c("above_average", "below_average"), names_to = "average", values_to = "count") %>%
mutate(percentage = round(count/sum(count) * 100, digits = 2)) %>%
mutate(percentage_label = paste(percentage, "%")) %>%
ggplot(aes("", percentage, fill = average)) +
geom_col(stat= "identity", width = 1) +
coord_polar("y", start = 0, direction = -1) +
theme_void() +
geom_text(position = position_stack(vjust = 0.5), aes(label = percentage_label)) +
ggtitle("The comparison of average score in 2015")
total_countries_2019 <- happiness_2019 %>%
select(`Country or region`) %>% count()
comparison_2019 <- happiness_2019 %>%
mutate(total_countries = total_countries_2019$n, average_score = mean(Score)) %>%
filter(Score > average_score) %>%
mutate(above_average = length(`Country or region`), below_average = total_countries - above_average)
pie_2019 <- comparison_2019 %>%
select(above_average, below_average) %>%
unique() %>%
pivot_longer(c("above_average", "below_average"), names_to = "average", values_to = "count") %>%
mutate(per = round(count/sum(count) * 100, digits = 2)) %>%
mutate(per_label = paste(per, "%")) %>%
ggplot(aes("", per, fill = average)) +
geom_col(stat = "identify", width = 1) +
coord_polar("y", start = 0, direction = -1) +
theme_void() +
geom_text(aes(label = per_label), position = position_stack(vjust = 0.5)) +
ggtitle("The comparison of average score in 2019")
top10_2015  <- happiness_2015 %>%
filter(`Happiness Rank` <= 10) %>%
select(Country, `Happiness Score`) %>%
rename("2015-01-01" = "Happiness Score")
top10_2015 %>%
arrange(desc(`2015-01-01`)) %>%
rename("2015" = "2015-01-01") %>%
kable(caption = "Top10 countries in 2015") %>%
kable_styling(bootstrap_options = c("bordered", "striped"))
total_data_plot <- total_data %>%
pivot_longer(c(`2015-01-01`,`2016-01-01`,`2017-01-01`,`2018-01-01`,`2019-01-01`), names_to = "year", values_to = "score") %>%
mutate(year = year(year))
total_data_plot %>%
ggplot(aes(year, score, colour = Country)) +
geom_line() +
geom_point(aes(shape = Country))
plot_grid(pie_2015,pie_2019, ncol=2)
comparison_2015 %>%
group_by(Region) %>%
count() %>%
ggplot(aes(reorder(Region, n), n)) +
geom_col(aes(fill = Region)) +
coord_flip() +
xlab("region") +
ylab("count") +
scale_y_continuous(breaks = seq(0, 20, by = 1))
region <- happiness_2015 %>% select(Country, Region)
comparison_2019 %>%
left_join(region, by=c("Country or region" = "Country")) %>%
filter(!is.na(Region)) %>%
group_by(Region) %>%
count() %>%
ggplot(aes(reorder(Region, n), n, fill = Region)) +
geom_col() +
coord_flip() +
xlab("region") +
ylab("count") +
scale_y_continuous(breaks = seq(0,20, by = 1))
plot_grid(pie_2015,pie_2019, ncol=2)
?read.csv
?read_csv
install.packages(c("fpp3", "GGally", "lwgeom", "relaimpo", "rnaturalearth"))
install.packages(c("fpp3", "GGally", "lwgeom", "relaimpo", "rnaturalearth"))
knitr::opts_chunk$set(echo = FALSE, cache=FALSE, message=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(tidyverse)
library(dplyr)
library(fpp3)
install.packages("fqq3")
install.packages("fpp3")
knitr::opts_chunk$set(echo = FALSE, cache=FALSE, message=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(tidyverse)
library(dplyr)
library(fpp3)
?fpp3
install.packages("fpp3")
Sys.setenv(LANG = "EN")
install.packages("fpp3")
install.packages(c("backports", "bookdown", "broom", "car", "carData", "class", "colourvalues", "dbplyr", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "httpuv", "jsonify", "later", "lubridate", "mapdeck", "maptools", "modelr", "naniar", "nlme", "nnet", "pkgbuild", "pkgload", "ps", "purrr", "raster", "rematch2", "reshape2", "rgdal", "rgeos", "rlang", "rmarkdown", "robotstxt", "rversions", "scales", "sfheaders", "sp", "spiderbar", "sugrrants", "survival", "systemfonts", "tibble", "tibbletime", "tidyr", "tinytex", "vctrs", "xfun", "xml2", "zoo"))
install.packages(c("backports", "bookdown", "broom", "car", "carData", "class", "colourvalues", "dbplyr", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "httpuv", "jsonify", "later", "lubridate", "mapdeck", "maptools", "modelr", "naniar", "nlme", "nnet", "pkgbuild", "pkgload", "ps", "purrr", "raster", "rematch2", "reshape2", "rgdal", "rgeos", "rlang", "rmarkdown", "robotstxt", "rversions", "scales", "sfheaders", "sp", "spiderbar", "sugrrants", "survival", "systemfonts", "tibble", "tibbletime", "tidyr", "tinytex", "vctrs", "xfun", "xml2", "zoo"))
install.packages(c("backports", "bookdown", "broom", "car", "carData", "class", "colourvalues", "dbplyr", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "httpuv", "jsonify", "later", "lubridate", "mapdeck", "maptools", "modelr", "naniar", "nlme", "nnet", "pkgbuild", "pkgload", "ps", "purrr", "raster", "rematch2", "reshape2", "rgdal", "rgeos", "rlang", "rmarkdown", "robotstxt", "rversions", "scales", "sfheaders", "sp", "spiderbar", "sugrrants", "survival", "systemfonts", "tibble", "tibbletime", "tidyr", "tinytex", "vctrs", "xfun", "xml2", "zoo"))
install.packages(c("backports", "bookdown", "broom", "car", "carData", "class", "colourvalues", "dbplyr", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "httpuv", "jsonify", "later", "lubridate", "mapdeck", "maptools", "modelr", "naniar", "nlme", "nnet", "pkgbuild", "pkgload", "ps", "purrr", "raster", "rematch2", "reshape2", "rgdal", "rgeos", "rlang", "rmarkdown", "robotstxt", "rversions", "scales", "sfheaders", "sp", "spiderbar", "sugrrants", "survival", "systemfonts", "tibble", "tibbletime", "tidyr", "tinytex", "vctrs", "xfun", "xml2", "zoo"))
knitr::opts_chunk$set(echo = FALSE, cache=FALSE, message=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
Sys.setenv(LANG = "EN")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("glue")
install.packages("tibble")
knitr::opts_chunk$set(echo = FALSE, cache=FALSE, message=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
library(ggplot2)
library(tidyverse)
library(dplyr)
library(relaimpo)
library(GGally)
library(kableExtra)
library(rnaturalearth)
library(sf)
library(rgeos)
library(lwgeom)
library(car)
library(here)
library(lubridate)
library(cowplot)
here <- here::here
select <- dplyr::select
citation("ggplot2")
citation("dplyr")
citation("relaimpo")
citation("GGally")
citation("kableExtra")
citation("rnaturalearth")
citation("sf")
citation("rgeos")
citation("lwgeom")
citation("car")
citation("here")
citation("lubridate")
citation("cowplot")
citation("ggplot2")
citation("dplyr")
citation("tidyverse")
citation("tidyverse")
citation("kableExtra")
install.packages(c("maps", "wbstats"))
