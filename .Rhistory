mod_detail = broom::augment(mod, data = nona_hs)
p1 = ggplot(mod_detail) +
geom_point(aes(.fitted, .resid)) +
geom_smooth(aes(.fitted, .resid))
p2 = ggplot(mod_detail) +
geom_qq(aes(sample = .resid)) +
geom_qq_line(aes(sample = .resid))
p3 = ggplot(mod_detail) +
geom_point(aes(.fitted, .cooksd)) +
geom_text_repel(data = filter(mod_detail, .cooksd>0.0083), aes(.fitted, .cooksd, label = paste0(name,',',year)), col = 'red') +
geom_point(data = filter(mod_detail, .cooksd>0.0083), aes(.fitted, .cooksd), col="blue")
library(gridExtra)
grid.arrange(arrangeGrob(p1,p2, ncol=2),
arrangeGrob(p3, ncol=1, nrow=1), top = "Regression diagnostics\n Top left: Residuals vs Fitted. Top right: Normal QQ plot. Bottom:  Cooks distances vs Fitted.", heights=c(1,2))
p1 = ggplot()+
geom_sf(data = world_map, aes(fill = name %in% c('Suriname', 'Angola', 'Botswana', 'Sudan', 'Gabon', 'Sierra Leone', 'Togo', 'Burundi'))) +
theme_bw()+
theme(legend.position = "bottom") +
labs(fill = 'With influential points')
p2 = ggplot(mod_detail) +
geom_point(aes(log_gdp,.fitted)) +
geom_point(data = filter(mod_detail, name %in% c('Suriname', 'Angola', 'Botswana', 'Sudan', 'Gabon', 'Sierra Leone', 'Togo', 'Burundi')), aes(log_gdp,.fitted),col="red")
p3 = ggplot(mod_detail) +
geom_point(aes(cpi,.fitted)) +
geom_point(data = filter(mod_detail, name %in% c('Suriname', 'Angola', 'Botswana', 'Sudan', 'Gabon', 'Sierra Leone', 'Togo', 'Burundi')), aes(cpi,.fitted),col="red")
p4 = ggplot(mod_detail) +
geom_point(aes(log_population,.fitted)) +
geom_point(data = filter(mod_detail, name %in% c('Suriname', 'Angola', 'Botswana', 'Sudan', 'Gabon', 'Sierra Leone', 'Togo', 'Burundi')), aes(log_population,.fitted),col="red")
p5 = ggplot(mod_detail) +
geom_point(aes(log_area,.fitted)) +
geom_point(data = filter(mod_detail, name %in% c('Suriname', 'Angola', 'Botswana', 'Sudan', 'Gabon', 'Sierra Leone', 'Togo', 'Burundi')), aes(log_area,.fitted),col="red")
grid.arrange(p1, arrangeGrob(p2, p3, p4,p5, ncol=2), top = "Diagnostics for influential data points\n Top: World map of countries with influential data points. \n Bottom: Scatter plots of fitted value against each regressor. Red dots represent the influential data points.", ncol=1, heights =c(2,1))
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
nrow = 1
strip.position = "bottom"
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
nrow = 1,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
happ_attr2019_plot
# Interactive map
# ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
nrow = 6.
strip.position = "bottom"
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
nrow = 6,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
happ_attr2019_plot
# Interactive map
# ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
nrow = 6,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
happ_attr2019_plot
# Interactive map
# ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
nrow = 6,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
happ_attr2019_plot
# Interactive map
# ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
ncol = 3,
nrow = 2,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
# happ_attr2019_plot
# Interactive map
ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
# Place all attribute scores on one variable for plotting
happ_attr2019 <- happ_2019 %>%
filter(year == 2019) %>%
pivot_longer("attr","attr_score",gdp_per_capita:perceptions_of_corruption)
# Place all attribute scores on one variable for plotting
happ_attr2019 <- happ_2019 %>%
filter(year == 2019) %>%
gather("attr","attr_score",gdp_per_capita:perceptions_of_corruption)
require(wbstats)
# Retrieve population estimates of countries in the world
pop_ests2018 <- wb(indicator = "SP.POP.TOTL", startdate = 2018, enddate = 2019)
pop_ests2018 <- pop_ests2018 %>%
select(country, value) %>%
rename(pop_total = value)
# Make country names consistent with population data
# setdiff(happiness_attr2019$country,pop_ests2018$country)
happ_attr2019$country <-
dplyr::recode(
happ_attr2019$country,
"Taiwan" = "China",
"Slovakia" = "Slovak Republic",
"Trinidad & Tobago" = "Trinidad and Tobago",
"South Korea" = "Korea, Rep.",
"Northern Cyprus" = "Cyprus",
"Russia" = "Russian Federation",
"Hong Kong" = "Hong Kong SAR, China",
"Kyrgyzstan" = "Kyrgyz Republic",
"Macedonia" = "North Macedonia",
"Ivory Coast" = "Cote d'Ivoire",
"Congo (Brazzaville)" = "Congo, Rep.",
"Laos" = "Lao PDR",
"Venezuela" = "Venezuela, RB",
"Palestinian Territories" = "West Bank and Gaza",
"Iran" = "Iran, Islamic Rep.",
"Congo (Kinshasa)" = "Congo, Dem. Rep.",
"Swaziland" = "Swaziland",
"Gambia" = "Gambia",
"Egypt" = "Egypt, Arab Rep.",
"Syria" = "Syrian Arab Republic",
"Yemen" = "Yemen, Rep.")
# Filter only countries in happiness dataset
happ_attr2019 <-
full_join(happ_attr2019, pop_ests2018, by = "country") %>%
filter(!is.na(overall_rank))
# Compute average attribute scores for each attribute
attr_scores2019 <- happ_attr2019 %>%
group_by(attr) %>%
summarise(mean_attr_score = mean(attr_score))
# Insert average attribute scores in df
happ_attr2019 <- full_join(happ_attr2019, attr_scores2019, by = "attr")
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
ncol = 3,
nrow = 2,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
# happ_attr2019_plot
# Interactive map
ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
?geom_hline
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
ncol = 3,
nrow = 2,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
# happ_attr2019_plot
# Interactive map
ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
ncol = 3,
nrow = 2,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
# happ_attr2019_plot
# Interactive map
ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
ncol = 3,
nrow = 2,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
happ_attr2019_plot
# Interactive map
# ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1, # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
ncol = 3,
nrow = 2,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
happ_attr2019_plot
# Interactive map
# ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free_y", # rescale each attribute score
ncol = 3,
nrow = 2,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
happ_attr2019_plot
# Interactive map
# ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
?facet_wrap
happ_attr2019_plot <- ggplot(data = happ_attr2019,
aes(x = 1:nrow(happ_attr2019), # x: number of rows in dataset
y = attr_score)) +
geom_point(aes(
colour = region,
alpha = 0.8,
size = pop_total,
label = country
)) +
scale_colour_brewer(palette = "Paired") +
# Remove x-axis title, lable and ticks
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
facet_wrap(~ attr,
scales = "free", # rescale each attribute score
ncol = 3,
nrow = 2,
strip.position = "bottom"
) +
geom_line(aes(y = mean_attr_score, # Add average attribute
x = 1:nrow(happ_attr2019),
group = attr),
colour = "black",
alpha = 0.7,
linetype = "dashed") +
labs(y = "Attribute Scores") +
theme(legend.position = "none",
panel.background = element_rect(fill = "light grey")
)
happ_attr2019_plot
# Interactive map
# ggplotly(happ_attr2019_plot, tooltip = c("colour","label", "y", "size"))
